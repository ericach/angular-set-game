{"version":3,"sources":["app/setgame/setgame.component.ts"],"names":[],"mappings":"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","file":"setgame.component.js","sourcesContent":["import { Component } from '@angular/core';\nimport { Http } from '@angular/http';\nimport * as _ from 'lodash';\n\ninterface CardObject {\n    color: string;\n    shape: string;\n    count: number;\n    fill: string;\n};\n\ninterface EventObject {\n    value: CardObject;\n};\n\n@Component({\n    selector: 'as-set-game',\n    templateUrl: 'app/setgame/setgame.html'\n})\nexport class SetGameComponent {\n\n    private cardDeck: Array<CardObject> = [];\n    private board: Array<CardObject> = [];\n    private selectedCards: Array<CardObject> = [];\n    private completedCount: number = 0;\n\n    constructor(private http: Http) {\n        this._loadCards();\n    };\n\n    newCardSelected(event: EventObject) {\n        this.selectedCards.push(event.value);\n\n        if (this.selectedCards.length === 3) {\n            let properSet = this.checkSet();\n            if (properSet) {\n                this.completeSet();\n            }\n        }\n    };\n\n    cardDeselected(event: EventObject) {\n        _.remove(this.selectedCards, function(i) {\n            return _.isEqual(i, event.value);\n        });\n    }\n\n    _allEqual(values) {\n        if (values[0] === values[1] && values[1] === values[2] && values[0] === values[2]) {\n            return true;\n        }\n        return false;\n    };\n\n    _allUnequal(values) {\n        if (values[0] !== values[1] && values[1] !== values[2] && values[0] !== values[2]) {\n            return true;\n        }\n        return false;\n    };\n\n    checkSet() {\n        // Color\n        let colors = _.map(this.selectedCards, 'color');\n        if (!(this._allEqual(colors) || this._allUnequal(colors))) {\n            return false;\n        }\n\n        // Shape\n        let shapes = _.map(this.selectedCards, 'shape');\n        if (!(this._allEqual(shapes) || this._allUnequal(shapes))) {\n            return false;\n        }\n\n        // Fill\n        let fills = _.map(this.selectedCards, 'fill');\n        if (!(this._allEqual(fills) || this._allUnequal(fills))) {\n            return false;\n        }\n\n        // Count\n        let counts = _.map(this.selectedCards, 'count');\n        if (!(this._allEqual(counts) || this._allUnequal(counts))) {\n            return false;\n        }\n\n        return true;\n    };\n\n    completeSet() {\n        this.completedCount++;\n        this._removeSetFromBoard();\n        this.selectedCards = [];\n        this._addCardsToBoard(3);\n    };\n\n    _removeSetFromBoard() {\n        _.forEach(this.selectedCards, (card) => {\n            _.remove(this.board, function(c) {\n                return _.isEqual(card, c);\n            });\n        });\n    };\n\n    shuffle() {\n        this.cardDeck = this.cardDeck.concat(this.board);\n        this.selectedCards = [];\n        this.board = [];\n        this._addCardsToBoard(12);\n    };\n\n    reset() {\n        this.selectedCards = [];\n        this.board = [];\n        this.completedCount = 0;\n        this._loadCards();\n    };\n\n    _loadCards() {\n        this.http.get('src/app/setgame/data/cards.json').subscribe(res => {\n            this.cardDeck = res.json();\n            this._addCardsToBoard(12);\n        });\n    };\n\n    _addCardsToBoard(count: number) {\n        for (let i = 0; i < count; i++) {\n            let randomIndex = this._getRandomIndex(0, this.cardDeck.length);\n            let card = this.cardDeck[randomIndex];\n            this.cardDeck.splice(randomIndex, 1);\n            this.board.push(card);\n        }\n    };\n\n    _getRandomIndex(min: number, max: number) {\n        min = Math.ceil(min);\n        max = Math.floor(max);\n        return Math.floor(Math.random() * (max - min)) + min;\n    };\n}\n"]}